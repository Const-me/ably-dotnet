/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Ably.Protocol
{

#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class SMessageTypes : TBase
    {
        private SMessageCount _all;
        private SMessageCount _messages;
        private SMessageCount _presence;

        public SMessageCount All
        {
            get
            {
                return _all;
            }
            set
            {
                __isset.all = true;
                this._all = value;
            }
        }

        public SMessageCount Messages
        {
            get
            {
                return _messages;
            }
            set
            {
                __isset.messages = true;
                this._messages = value;
            }
        }

        public SMessageCount Presence
        {
            get
            {
                return _presence;
            }
            set
            {
                __isset.presence = true;
                this._presence = value;
            }
        }


        public Isset __isset;
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {
            public bool all;
            public bool messages;
            public bool presence;
        }

        public SMessageTypes()
        {
        }

        public void Read(TProtocol iprot)
        {
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == Thrift.Protocol.TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == Thrift.Protocol.TType.Struct)
                        {
                            All = new SMessageCount();
                            All.Read(iprot);
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 2:
                        if (field.Type == Thrift.Protocol.TType.Struct)
                        {
                            Messages = new SMessageCount();
                            Messages.Read(iprot);
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 3:
                        if (field.Type == Thrift.Protocol.TType.Struct)
                        {
                            Presence = new SMessageCount();
                            Presence.Read(iprot);
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("SMessageTypes");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            if (All != null && __isset.all)
            {
                field.Name = "all";
                field.Type = Thrift.Protocol.TType.Struct;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                All.Write(oprot);
                oprot.WriteFieldEnd();
            }
            if (Messages != null && __isset.messages)
            {
                field.Name = "messages";
                field.Type = Thrift.Protocol.TType.Struct;
                field.ID = 2;
                oprot.WriteFieldBegin(field);
                Messages.Write(oprot);
                oprot.WriteFieldEnd();
            }
            if (Presence != null && __isset.presence)
            {
                field.Name = "presence";
                field.Type = Thrift.Protocol.TType.Struct;
                field.ID = 3;
                oprot.WriteFieldBegin(field);
                Presence.Write(oprot);
                oprot.WriteFieldEnd();
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder("SMessageTypes(");
            sb.Append("All: ");
            sb.Append(All == null ? "<null>" : All.ToString());
            sb.Append(",Messages: ");
            sb.Append(Messages == null ? "<null>" : Messages.ToString());
            sb.Append(",Presence: ");
            sb.Append(Presence == null ? "<null>" : Presence.ToString());
            sb.Append(")");
            return sb.ToString();
        }

    }

}
