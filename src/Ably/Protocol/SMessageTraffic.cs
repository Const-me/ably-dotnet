/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Ably.Protocol
{

#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class SMessageTraffic : TBase
    {
        private SMessageTypes _all;
        private SMessageTypes _realtime;
        private SMessageTypes _rest;
        private SMessageTypes _push;
        private SMessageTypes _httpStream;

        public SMessageTypes All
        {
            get
            {
                return _all;
            }
            set
            {
                __isset.all = true;
                this._all = value;
            }
        }

        public SMessageTypes Realtime
        {
            get
            {
                return _realtime;
            }
            set
            {
                __isset.realtime = true;
                this._realtime = value;
            }
        }

        public SMessageTypes Rest
        {
            get
            {
                return _rest;
            }
            set
            {
                __isset.rest = true;
                this._rest = value;
            }
        }

        public SMessageTypes Push
        {
            get
            {
                return _push;
            }
            set
            {
                __isset.push = true;
                this._push = value;
            }
        }

        public SMessageTypes HttpStream
        {
            get
            {
                return _httpStream;
            }
            set
            {
                __isset.httpStream = true;
                this._httpStream = value;
            }
        }


        public Isset __isset;
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {
            public bool all;
            public bool realtime;
            public bool rest;
            public bool push;
            public bool httpStream;
        }

        public SMessageTraffic()
        {
        }

        public void Read(TProtocol iprot)
        {
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == Thrift.Protocol.TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == Thrift.Protocol.TType.Struct)
                        {
                            All = new SMessageTypes();
                            All.Read(iprot);
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 2:
                        if (field.Type == Thrift.Protocol.TType.Struct)
                        {
                            Realtime = new SMessageTypes();
                            Realtime.Read(iprot);
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 3:
                        if (field.Type == Thrift.Protocol.TType.Struct)
                        {
                            Rest = new SMessageTypes();
                            Rest.Read(iprot);
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 4:
                        if (field.Type == Thrift.Protocol.TType.Struct)
                        {
                            Push = new SMessageTypes();
                            Push.Read(iprot);
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 5:
                        if (field.Type == Thrift.Protocol.TType.Struct)
                        {
                            HttpStream = new SMessageTypes();
                            HttpStream.Read(iprot);
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("SMessageTraffic");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            if (All != null && __isset.all)
            {
                field.Name = "all";
                field.Type = Thrift.Protocol.TType.Struct;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                All.Write(oprot);
                oprot.WriteFieldEnd();
            }
            if (Realtime != null && __isset.realtime)
            {
                field.Name = "realtime";
                field.Type = Thrift.Protocol.TType.Struct;
                field.ID = 2;
                oprot.WriteFieldBegin(field);
                Realtime.Write(oprot);
                oprot.WriteFieldEnd();
            }
            if (Rest != null && __isset.rest)
            {
                field.Name = "rest";
                field.Type = Thrift.Protocol.TType.Struct;
                field.ID = 3;
                oprot.WriteFieldBegin(field);
                Rest.Write(oprot);
                oprot.WriteFieldEnd();
            }
            if (Push != null && __isset.push)
            {
                field.Name = "push";
                field.Type = Thrift.Protocol.TType.Struct;
                field.ID = 4;
                oprot.WriteFieldBegin(field);
                Push.Write(oprot);
                oprot.WriteFieldEnd();
            }
            if (HttpStream != null && __isset.httpStream)
            {
                field.Name = "httpStream";
                field.Type = Thrift.Protocol.TType.Struct;
                field.ID = 5;
                oprot.WriteFieldBegin(field);
                HttpStream.Write(oprot);
                oprot.WriteFieldEnd();
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder("SMessageTraffic(");
            sb.Append("All: ");
            sb.Append(All == null ? "<null>" : All.ToString());
            sb.Append(",Realtime: ");
            sb.Append(Realtime == null ? "<null>" : Realtime.ToString());
            sb.Append(",Rest: ");
            sb.Append(Rest == null ? "<null>" : Rest.ToString());
            sb.Append(",Push: ");
            sb.Append(Push == null ? "<null>" : Push.ToString());
            sb.Append(",HttpStream: ");
            sb.Append(HttpStream == null ? "<null>" : HttpStream.ToString());
            sb.Append(")");
            return sb.ToString();
        }

    }

}
