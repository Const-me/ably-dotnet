/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Ably.Protocol
{

#if !SILVERLIGHT
    [Serializable]
#endif
    internal partial class SConnectionTypes : TBase
    {
        private SResourceCount _all;
        private SResourceCount _plain;
        private SResourceCount _tls;

        public SResourceCount All
        {
            get
            {
                return _all;
            }
            set
            {
                __isset.all = true;
                this._all = value;
            }
        }

        public SResourceCount Plain
        {
            get
            {
                return _plain;
            }
            set
            {
                __isset.plain = true;
                this._plain = value;
            }
        }

        public SResourceCount Tls
        {
            get
            {
                return _tls;
            }
            set
            {
                __isset.tls = true;
                this._tls = value;
            }
        }


        public Isset __isset;
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {
            public bool all;
            public bool plain;
            public bool tls;
        }

        public SConnectionTypes()
        {
        }

        public void Read(TProtocol iprot)
        {
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == Thrift.Protocol.TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == Thrift.Protocol.TType.Struct)
                        {
                            All = new SResourceCount();
                            All.Read(iprot);
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 2:
                        if (field.Type == Thrift.Protocol.TType.Struct)
                        {
                            Plain = new SResourceCount();
                            Plain.Read(iprot);
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 3:
                        if (field.Type == Thrift.Protocol.TType.Struct)
                        {
                            Tls = new SResourceCount();
                            Tls.Read(iprot);
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("SConnectionTypes");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            if (All != null && __isset.all)
            {
                field.Name = "all";
                field.Type = Thrift.Protocol.TType.Struct;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                All.Write(oprot);
                oprot.WriteFieldEnd();
            }
            if (Plain != null && __isset.plain)
            {
                field.Name = "plain";
                field.Type = Thrift.Protocol.TType.Struct;
                field.ID = 2;
                oprot.WriteFieldBegin(field);
                Plain.Write(oprot);
                oprot.WriteFieldEnd();
            }
            if (Tls != null && __isset.tls)
            {
                field.Name = "tls";
                field.Type = Thrift.Protocol.TType.Struct;
                field.ID = 3;
                oprot.WriteFieldBegin(field);
                Tls.Write(oprot);
                oprot.WriteFieldEnd();
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder("SConnectionTypes(");
            sb.Append("All: ");
            sb.Append(All == null ? "<null>" : All.ToString());
            sb.Append(",Plain: ");
            sb.Append(Plain == null ? "<null>" : Plain.ToString());
            sb.Append(",Tls: ");
            sb.Append(Tls == null ? "<null>" : Tls.ToString());
            sb.Append(")");
            return sb.ToString();
        }

    }

}
