/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Ably.Protocol
{

#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class TMessage : TBase
    {
        private string _name;
        private string _clientId;
        private long _timestamp;
        private TData _data;
        private List<string> _tags;

        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                __isset.name = true;
                this._name = value;
            }
        }

        public string ClientId
        {
            get
            {
                return _clientId;
            }
            set
            {
                __isset.clientId = true;
                this._clientId = value;
            }
        }

        public long Timestamp
        {
            get
            {
                return _timestamp;
            }
            set
            {
                __isset.timestamp = true;
                this._timestamp = value;
            }
        }

        public TData Data
        {
            get
            {
                return _data;
            }
            set
            {
                __isset.data = true;
                this._data = value;
            }
        }

        public List<string> Tags
        {
            get
            {
                return _tags;
            }
            set
            {
                __isset.tags = true;
                this._tags = value;
            }
        }


        public Isset __isset;
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {
            public bool name;
            public bool clientId;
            public bool timestamp;
            public bool data;
            public bool tags;
        }

        public TMessage()
        {
        }

        public void Read(TProtocol iprot)
        {
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == Thrift.Protocol.TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == Thrift.Protocol.TType.String)
                        {
                            Name = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 2:
                        if (field.Type == Thrift.Protocol.TType.String)
                        {
                            ClientId = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 3:
                        if (field.Type == Thrift.Protocol.TType.I64)
                        {
                            Timestamp = iprot.ReadI64();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 4:
                        if (field.Type == Thrift.Protocol.TType.Struct)
                        {
                            Data = new TData();
                            Data.Read(iprot);
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 5:
                        if (field.Type == Thrift.Protocol.TType.List)
                        {
                            {
                                Tags = new List<string>();
                                TList _list4 = iprot.ReadListBegin();
                                for (int _i5 = 0; _i5 < _list4.Count; ++_i5)
                                {
                                    string _elem6 = null;
                                    _elem6 = iprot.ReadString();
                                    Tags.Add(_elem6);
                                }
                                iprot.ReadListEnd();
                            }
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("TMessage");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            if (Name != null && __isset.name)
            {
                field.Name = "name";
                field.Type = Thrift.Protocol.TType.String;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(Name);
                oprot.WriteFieldEnd();
            }
            if (ClientId != null && __isset.clientId)
            {
                field.Name = "clientId";
                field.Type = Thrift.Protocol.TType.String;
                field.ID = 2;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(ClientId);
                oprot.WriteFieldEnd();
            }
            if (__isset.timestamp)
            {
                field.Name = "timestamp";
                field.Type = Thrift.Protocol.TType.I64;
                field.ID = 3;
                oprot.WriteFieldBegin(field);
                oprot.WriteI64(Timestamp);
                oprot.WriteFieldEnd();
            }
            if (Data != null && __isset.data)
            {
                field.Name = "data";
                field.Type = Thrift.Protocol.TType.Struct;
                field.ID = 4;
                oprot.WriteFieldBegin(field);
                Data.Write(oprot);
                oprot.WriteFieldEnd();
            }
            if (Tags != null && __isset.tags)
            {
                field.Name = "tags";
                field.Type = Thrift.Protocol.TType.List;
                field.ID = 5;
                oprot.WriteFieldBegin(field);
                {
                    oprot.WriteListBegin(new TList(Thrift.Protocol.TType.String, Tags.Count));
                    foreach (string _iter7 in Tags)
                    {
                        oprot.WriteString(_iter7);
                    }
                    oprot.WriteListEnd();
                }
                oprot.WriteFieldEnd();
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder("TMessage(");
            sb.Append("Name: ");
            sb.Append(Name);
            sb.Append(",ClientId: ");
            sb.Append(ClientId);
            sb.Append(",Timestamp: ");
            sb.Append(Timestamp);
            sb.Append(",Data: ");
            sb.Append(Data == null ? "<null>" : Data.ToString());
            sb.Append(",Tags: ");
            sb.Append(Tags);
            sb.Append(")");
            return sb.ToString();
        }

    }

}
