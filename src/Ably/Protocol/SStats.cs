/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Ably.Protocol
{

#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class SStats : TBase
    {
        private SMessageTypes _all;
        private SMessageTraffic _inbound;
        private SMessageTraffic _outbound;
        private SMessageTypes _persisted;
        private SConnectionTypes _connections;
        private SResourceCount _channels;
        private SRequestCount _apiRequests;
        private SRequestCount _tokenRequests;
        private string _inProgress;
        private int _count;

        public SMessageTypes All
        {
            get
            {
                return _all;
            }
            set
            {
                __isset.all = true;
                this._all = value;
            }
        }

        public SMessageTraffic Inbound
        {
            get
            {
                return _inbound;
            }
            set
            {
                __isset.inbound = true;
                this._inbound = value;
            }
        }

        public SMessageTraffic Outbound
        {
            get
            {
                return _outbound;
            }
            set
            {
                __isset.outbound = true;
                this._outbound = value;
            }
        }

        public SMessageTypes Persisted
        {
            get
            {
                return _persisted;
            }
            set
            {
                __isset.persisted = true;
                this._persisted = value;
            }
        }

        public SConnectionTypes Connections
        {
            get
            {
                return _connections;
            }
            set
            {
                __isset.connections = true;
                this._connections = value;
            }
        }

        public SResourceCount Channels
        {
            get
            {
                return _channels;
            }
            set
            {
                __isset.channels = true;
                this._channels = value;
            }
        }

        public SRequestCount ApiRequests
        {
            get
            {
                return _apiRequests;
            }
            set
            {
                __isset.apiRequests = true;
                this._apiRequests = value;
            }
        }

        public SRequestCount TokenRequests
        {
            get
            {
                return _tokenRequests;
            }
            set
            {
                __isset.tokenRequests = true;
                this._tokenRequests = value;
            }
        }

        public string InProgress
        {
            get
            {
                return _inProgress;
            }
            set
            {
                __isset.inProgress = true;
                this._inProgress = value;
            }
        }

        public int Count
        {
            get
            {
                return _count;
            }
            set
            {
                __isset.count = true;
                this._count = value;
            }
        }


        public Isset __isset;
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {
            public bool all;
            public bool inbound;
            public bool outbound;
            public bool persisted;
            public bool connections;
            public bool channels;
            public bool apiRequests;
            public bool tokenRequests;
            public bool inProgress;
            public bool count;
        }

        public SStats()
        {
        }

        public void Read(TProtocol iprot)
        {
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == Thrift.Protocol.TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == Thrift.Protocol.TType.Struct)
                        {
                            All = new SMessageTypes();
                            All.Read(iprot);
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 2:
                        if (field.Type == Thrift.Protocol.TType.Struct)
                        {
                            Inbound = new SMessageTraffic();
                            Inbound.Read(iprot);
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 3:
                        if (field.Type == Thrift.Protocol.TType.Struct)
                        {
                            Outbound = new SMessageTraffic();
                            Outbound.Read(iprot);
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 4:
                        if (field.Type == Thrift.Protocol.TType.Struct)
                        {
                            Persisted = new SMessageTypes();
                            Persisted.Read(iprot);
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 5:
                        if (field.Type == Thrift.Protocol.TType.Struct)
                        {
                            Connections = new SConnectionTypes();
                            Connections.Read(iprot);
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 6:
                        if (field.Type == Thrift.Protocol.TType.Struct)
                        {
                            Channels = new SResourceCount();
                            Channels.Read(iprot);
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 7:
                        if (field.Type == Thrift.Protocol.TType.Struct)
                        {
                            ApiRequests = new SRequestCount();
                            ApiRequests.Read(iprot);
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 8:
                        if (field.Type == Thrift.Protocol.TType.Struct)
                        {
                            TokenRequests = new SRequestCount();
                            TokenRequests.Read(iprot);
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 10:
                        if (field.Type == Thrift.Protocol.TType.String)
                        {
                            InProgress = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 11:
                        if (field.Type == Thrift.Protocol.TType.I32)
                        {
                            Count = iprot.ReadI32();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("SStats");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            if (All != null && __isset.all)
            {
                field.Name = "all";
                field.Type = Thrift.Protocol.TType.Struct;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                All.Write(oprot);
                oprot.WriteFieldEnd();
            }
            if (Inbound != null && __isset.inbound)
            {
                field.Name = "inbound";
                field.Type = Thrift.Protocol.TType.Struct;
                field.ID = 2;
                oprot.WriteFieldBegin(field);
                Inbound.Write(oprot);
                oprot.WriteFieldEnd();
            }
            if (Outbound != null && __isset.outbound)
            {
                field.Name = "outbound";
                field.Type = Thrift.Protocol.TType.Struct;
                field.ID = 3;
                oprot.WriteFieldBegin(field);
                Outbound.Write(oprot);
                oprot.WriteFieldEnd();
            }
            if (Persisted != null && __isset.persisted)
            {
                field.Name = "persisted";
                field.Type = Thrift.Protocol.TType.Struct;
                field.ID = 4;
                oprot.WriteFieldBegin(field);
                Persisted.Write(oprot);
                oprot.WriteFieldEnd();
            }
            if (Connections != null && __isset.connections)
            {
                field.Name = "connections";
                field.Type = Thrift.Protocol.TType.Struct;
                field.ID = 5;
                oprot.WriteFieldBegin(field);
                Connections.Write(oprot);
                oprot.WriteFieldEnd();
            }
            if (Channels != null && __isset.channels)
            {
                field.Name = "channels";
                field.Type = Thrift.Protocol.TType.Struct;
                field.ID = 6;
                oprot.WriteFieldBegin(field);
                Channels.Write(oprot);
                oprot.WriteFieldEnd();
            }
            if (ApiRequests != null && __isset.apiRequests)
            {
                field.Name = "apiRequests";
                field.Type = Thrift.Protocol.TType.Struct;
                field.ID = 7;
                oprot.WriteFieldBegin(field);
                ApiRequests.Write(oprot);
                oprot.WriteFieldEnd();
            }
            if (TokenRequests != null && __isset.tokenRequests)
            {
                field.Name = "tokenRequests";
                field.Type = Thrift.Protocol.TType.Struct;
                field.ID = 8;
                oprot.WriteFieldBegin(field);
                TokenRequests.Write(oprot);
                oprot.WriteFieldEnd();
            }
            if (InProgress != null && __isset.inProgress)
            {
                field.Name = "inProgress";
                field.Type = Thrift.Protocol.TType.String;
                field.ID = 10;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(InProgress);
                oprot.WriteFieldEnd();
            }
            if (__isset.count)
            {
                field.Name = "count";
                field.Type = Thrift.Protocol.TType.I32;
                field.ID = 11;
                oprot.WriteFieldBegin(field);
                oprot.WriteI32(Count);
                oprot.WriteFieldEnd();
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder("SStats(");
            sb.Append("All: ");
            sb.Append(All == null ? "<null>" : All.ToString());
            sb.Append(",Inbound: ");
            sb.Append(Inbound == null ? "<null>" : Inbound.ToString());
            sb.Append(",Outbound: ");
            sb.Append(Outbound == null ? "<null>" : Outbound.ToString());
            sb.Append(",Persisted: ");
            sb.Append(Persisted == null ? "<null>" : Persisted.ToString());
            sb.Append(",Connections: ");
            sb.Append(Connections == null ? "<null>" : Connections.ToString());
            sb.Append(",Channels: ");
            sb.Append(Channels == null ? "<null>" : Channels.ToString());
            sb.Append(",ApiRequests: ");
            sb.Append(ApiRequests == null ? "<null>" : ApiRequests.ToString());
            sb.Append(",TokenRequests: ");
            sb.Append(TokenRequests == null ? "<null>" : TokenRequests.ToString());
            sb.Append(",InProgress: ");
            sb.Append(InProgress);
            sb.Append(",Count: ");
            sb.Append(Count);
            sb.Append(")");
            return sb.ToString();
        }

    }

}
