/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Ably.Protocol
{

#if !SILVERLIGHT
    [Serializable]
#endif
    internal partial class SMessageCount : TBase
    {
        private double _count;
        private double _data;

        public double Count
        {
            get
            {
                return _count;
            }
            set
            {
                __isset.count = true;
                this._count = value;
            }
        }

        public double Data
        {
            get
            {
                return _data;
            }
            set
            {
                __isset.data = true;
                this._data = value;
            }
        }


        public Isset __isset;
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {
            public bool count;
            public bool data;
        }

        public SMessageCount()
        {
        }

        public void Read(TProtocol iprot)
        {
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == Thrift.Protocol.TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == Thrift.Protocol.TType.Double)
                        {
                            Count = iprot.ReadDouble();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 2:
                        if (field.Type == Thrift.Protocol.TType.Double)
                        {
                            Data = iprot.ReadDouble();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("SMessageCount");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            if (__isset.count)
            {
                field.Name = "count";
                field.Type = Thrift.Protocol.TType.Double;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                oprot.WriteDouble(Count);
                oprot.WriteFieldEnd();
            }
            if (__isset.data)
            {
                field.Name = "data";
                field.Type = Thrift.Protocol.TType.Double;
                field.ID = 2;
                oprot.WriteFieldBegin(field);
                oprot.WriteDouble(Data);
                oprot.WriteFieldEnd();
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder("SMessageCount(");
            sb.Append("Count: ");
            sb.Append(Count);
            sb.Append(",Data: ");
            sb.Append(Data);
            sb.Append(")");
            return sb.ToString();
        }

    }

}
