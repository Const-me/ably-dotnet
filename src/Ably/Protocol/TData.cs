/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Ably.Protocol
{

#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class TData : TBase
    {
        private TType _type;
        private int _i32Data;
        private long _i64Data;
        private double _doubleData;
        private string _stringData;
        private byte[] _binaryData;
        private byte[] _cipherData;

        /// <summary>
        /// 
        /// <seealso cref="TType"/>
        /// </summary>
        public TType Type
        {
            get
            {
                return _type;
            }
            set
            {
                __isset.type = true;
                this._type = value;
            }
        }

        public int I32Data
        {
            get
            {
                return _i32Data;
            }
            set
            {
                __isset.i32Data = true;
                this._i32Data = value;
            }
        }

        public long I64Data
        {
            get
            {
                return _i64Data;
            }
            set
            {
                __isset.i64Data = true;
                this._i64Data = value;
            }
        }

        public double DoubleData
        {
            get
            {
                return _doubleData;
            }
            set
            {
                __isset.doubleData = true;
                this._doubleData = value;
            }
        }

        public string StringData
        {
            get
            {
                return _stringData;
            }
            set
            {
                __isset.stringData = true;
                this._stringData = value;
            }
        }

        public byte[] BinaryData
        {
            get
            {
                return _binaryData;
            }
            set
            {
                __isset.binaryData = true;
                this._binaryData = value;
            }
        }

        public byte[] CipherData
        {
            get
            {
                return _cipherData;
            }
            set
            {
                __isset.cipherData = true;
                this._cipherData = value;
            }
        }


        public Isset __isset;
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {
            public bool type;
            public bool i32Data;
            public bool i64Data;
            public bool doubleData;
            public bool stringData;
            public bool binaryData;
            public bool cipherData;
        }

        public TData()
        {
        }

        public void Read(TProtocol iprot)
        {
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == Thrift.Protocol.TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == Thrift.Protocol.TType.I32)
                        {
                            Type = (TType)iprot.ReadI32();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 2:
                        if (field.Type == Thrift.Protocol.TType.I32)
                        {
                            I32Data = iprot.ReadI32();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 3:
                        if (field.Type == Thrift.Protocol.TType.I64)
                        {
                            I64Data = iprot.ReadI64();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 4:
                        if (field.Type == Thrift.Protocol.TType.Double)
                        {
                            DoubleData = iprot.ReadDouble();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 5:
                        if (field.Type == Thrift.Protocol.TType.String)
                        {
                            StringData = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 6:
                        if (field.Type == Thrift.Protocol.TType.String)
                        {
                            BinaryData = iprot.ReadBinary();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 7:
                        if (field.Type == Thrift.Protocol.TType.String)
                        {
                            CipherData = iprot.ReadBinary();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("TData");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            if (__isset.type)
            {
                field.Name = "type";
                field.Type = Thrift.Protocol.TType.I32;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                oprot.WriteI32((int)Type);
                oprot.WriteFieldEnd();
            }
            if (__isset.i32Data)
            {
                field.Name = "i32Data";
                field.Type = Thrift.Protocol.TType.I32;
                field.ID = 2;
                oprot.WriteFieldBegin(field);
                oprot.WriteI32(I32Data);
                oprot.WriteFieldEnd();
            }
            if (__isset.i64Data)
            {
                field.Name = "i64Data";
                field.Type = Thrift.Protocol.TType.I64;
                field.ID = 3;
                oprot.WriteFieldBegin(field);
                oprot.WriteI64(I64Data);
                oprot.WriteFieldEnd();
            }
            if (__isset.doubleData)
            {
                field.Name = "doubleData";
                field.Type = Thrift.Protocol.TType.Double;
                field.ID = 4;
                oprot.WriteFieldBegin(field);
                oprot.WriteDouble(DoubleData);
                oprot.WriteFieldEnd();
            }
            if (StringData != null && __isset.stringData)
            {
                field.Name = "stringData";
                field.Type = Thrift.Protocol.TType.String;
                field.ID = 5;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(StringData);
                oprot.WriteFieldEnd();
            }
            if (BinaryData != null && __isset.binaryData)
            {
                field.Name = "binaryData";
                field.Type = Thrift.Protocol.TType.String;
                field.ID = 6;
                oprot.WriteFieldBegin(field);
                oprot.WriteBinary(BinaryData);
                oprot.WriteFieldEnd();
            }
            if (CipherData != null && __isset.cipherData)
            {
                field.Name = "cipherData";
                field.Type = Thrift.Protocol.TType.String;
                field.ID = 7;
                oprot.WriteFieldBegin(field);
                oprot.WriteBinary(CipherData);
                oprot.WriteFieldEnd();
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder("TData(");
            sb.Append("Type: ");
            sb.Append(Type);
            sb.Append(",I32Data: ");
            sb.Append(I32Data);
            sb.Append(",I64Data: ");
            sb.Append(I64Data);
            sb.Append(",DoubleData: ");
            sb.Append(DoubleData);
            sb.Append(",StringData: ");
            sb.Append(StringData);
            sb.Append(",BinaryData: ");
            sb.Append(BinaryData);
            sb.Append(",CipherData: ");
            sb.Append(CipherData);
            sb.Append(")");
            return sb.ToString();
        }

    }

}
