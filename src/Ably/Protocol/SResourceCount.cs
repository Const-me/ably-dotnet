/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Ably.Protocol
{

#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class SResourceCount : TBase
    {
        private double _opened;
        private double _peak;
        private double _mean;
        private double _min;
        private double _refused;
        private double _sample_count;
        private double _sample_sum;

        public double Opened
        {
            get
            {
                return _opened;
            }
            set
            {
                __isset.opened = true;
                this._opened = value;
            }
        }

        public double Peak
        {
            get
            {
                return _peak;
            }
            set
            {
                __isset.peak = true;
                this._peak = value;
            }
        }

        public double Mean
        {
            get
            {
                return _mean;
            }
            set
            {
                __isset.mean = true;
                this._mean = value;
            }
        }

        public double Min
        {
            get
            {
                return _min;
            }
            set
            {
                __isset.min = true;
                this._min = value;
            }
        }

        public double Refused
        {
            get
            {
                return _refused;
            }
            set
            {
                __isset.refused = true;
                this._refused = value;
            }
        }

        public double Sample_count
        {
            get
            {
                return _sample_count;
            }
            set
            {
                __isset.sample_count = true;
                this._sample_count = value;
            }
        }

        public double Sample_sum
        {
            get
            {
                return _sample_sum;
            }
            set
            {
                __isset.sample_sum = true;
                this._sample_sum = value;
            }
        }


        public Isset __isset;
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {
            public bool opened;
            public bool peak;
            public bool mean;
            public bool min;
            public bool refused;
            public bool sample_count;
            public bool sample_sum;
        }

        public SResourceCount()
        {
        }

        public void Read(TProtocol iprot)
        {
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == Thrift.Protocol.TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == Thrift.Protocol.TType.Double)
                        {
                            Opened = iprot.ReadDouble();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 2:
                        if (field.Type == Thrift.Protocol.TType.Double)
                        {
                            Peak = iprot.ReadDouble();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 3:
                        if (field.Type == Thrift.Protocol.TType.Double)
                        {
                            Mean = iprot.ReadDouble();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 4:
                        if (field.Type == Thrift.Protocol.TType.Double)
                        {
                            Min = iprot.ReadDouble();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 5:
                        if (field.Type == Thrift.Protocol.TType.Double)
                        {
                            Refused = iprot.ReadDouble();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 10:
                        if (field.Type == Thrift.Protocol.TType.Double)
                        {
                            Sample_count = iprot.ReadDouble();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 11:
                        if (field.Type == Thrift.Protocol.TType.Double)
                        {
                            Sample_sum = iprot.ReadDouble();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("SResourceCount");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            if (__isset.opened)
            {
                field.Name = "opened";
                field.Type = Thrift.Protocol.TType.Double;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                oprot.WriteDouble(Opened);
                oprot.WriteFieldEnd();
            }
            if (__isset.peak)
            {
                field.Name = "peak";
                field.Type = Thrift.Protocol.TType.Double;
                field.ID = 2;
                oprot.WriteFieldBegin(field);
                oprot.WriteDouble(Peak);
                oprot.WriteFieldEnd();
            }
            if (__isset.mean)
            {
                field.Name = "mean";
                field.Type = Thrift.Protocol.TType.Double;
                field.ID = 3;
                oprot.WriteFieldBegin(field);
                oprot.WriteDouble(Mean);
                oprot.WriteFieldEnd();
            }
            if (__isset.min)
            {
                field.Name = "min";
                field.Type = Thrift.Protocol.TType.Double;
                field.ID = 4;
                oprot.WriteFieldBegin(field);
                oprot.WriteDouble(Min);
                oprot.WriteFieldEnd();
            }
            if (__isset.refused)
            {
                field.Name = "refused";
                field.Type = Thrift.Protocol.TType.Double;
                field.ID = 5;
                oprot.WriteFieldBegin(field);
                oprot.WriteDouble(Refused);
                oprot.WriteFieldEnd();
            }
            if (__isset.sample_count)
            {
                field.Name = "sample_count";
                field.Type = Thrift.Protocol.TType.Double;
                field.ID = 10;
                oprot.WriteFieldBegin(field);
                oprot.WriteDouble(Sample_count);
                oprot.WriteFieldEnd();
            }
            if (__isset.sample_sum)
            {
                field.Name = "sample_sum";
                field.Type = Thrift.Protocol.TType.Double;
                field.ID = 11;
                oprot.WriteFieldBegin(field);
                oprot.WriteDouble(Sample_sum);
                oprot.WriteFieldEnd();
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder("SResourceCount(");
            sb.Append("Opened: ");
            sb.Append(Opened);
            sb.Append(",Peak: ");
            sb.Append(Peak);
            sb.Append(",Mean: ");
            sb.Append(Mean);
            sb.Append(",Min: ");
            sb.Append(Min);
            sb.Append(",Refused: ");
            sb.Append(Refused);
            sb.Append(",Sample_count: ");
            sb.Append(Sample_count);
            sb.Append(",Sample_sum: ");
            sb.Append(Sample_sum);
            sb.Append(")");
            return sb.ToString();
        }

    }

}
