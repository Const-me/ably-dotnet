/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Ably.Protocol
{

#if !SILVERLIGHT
    [Serializable]
#endif
    internal partial class TProtocolMessage : TBase
    {
        private TAction _action;
        private sbyte _flags;
        private int _count;
        private TError _error;
        private string _applicationId;
        private string _connectionId;
        private long _connectionSerial;
        private string _channel;
        private string _channelSerial;
        private long _msgSerial;
        private long _timestamp;
        private List<TMessage> _messages;
        private List<TPresence> _presence;

        /// <summary>
        /// 
        /// <seealso cref="TAction"/>
        /// </summary>
        public TAction Action
        {
            get
            {
                return _action;
            }
            set
            {
                __isset.action = true;
                this._action = value;
            }
        }

        public sbyte Flags
        {
            get
            {
                return _flags;
            }
            set
            {
                __isset.flags = true;
                this._flags = value;
            }
        }

        public int Count
        {
            get
            {
                return _count;
            }
            set
            {
                __isset.count = true;
                this._count = value;
            }
        }

        public TError Error
        {
            get
            {
                return _error;
            }
            set
            {
                __isset.error = true;
                this._error = value;
            }
        }

        public string ApplicationId
        {
            get
            {
                return _applicationId;
            }
            set
            {
                __isset.applicationId = true;
                this._applicationId = value;
            }
        }

        public string ConnectionId
        {
            get
            {
                return _connectionId;
            }
            set
            {
                __isset.connectionId = true;
                this._connectionId = value;
            }
        }

        public long ConnectionSerial
        {
            get
            {
                return _connectionSerial;
            }
            set
            {
                __isset.connectionSerial = true;
                this._connectionSerial = value;
            }
        }

        public string Channel
        {
            get
            {
                return _channel;
            }
            set
            {
                __isset.channel = true;
                this._channel = value;
            }
        }

        public string ChannelSerial
        {
            get
            {
                return _channelSerial;
            }
            set
            {
                __isset.channelSerial = true;
                this._channelSerial = value;
            }
        }

        public long MsgSerial
        {
            get
            {
                return _msgSerial;
            }
            set
            {
                __isset.msgSerial = true;
                this._msgSerial = value;
            }
        }

        public long Timestamp
        {
            get
            {
                return _timestamp;
            }
            set
            {
                __isset.timestamp = true;
                this._timestamp = value;
            }
        }

        public List<TMessage> Messages
        {
            get
            {
                return _messages;
            }
            set
            {
                __isset.messages = true;
                this._messages = value;
            }
        }

        public List<TPresence> Presence
        {
            get
            {
                return _presence;
            }
            set
            {
                __isset.presence = true;
                this._presence = value;
            }
        }


        public Isset __isset;
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {
            public bool action;
            public bool flags;
            public bool count;
            public bool error;
            public bool applicationId;
            public bool connectionId;
            public bool connectionSerial;
            public bool channel;
            public bool channelSerial;
            public bool msgSerial;
            public bool timestamp;
            public bool messages;
            public bool presence;
        }

        public TProtocolMessage()
        {
        }

        public void Read(TProtocol iprot)
        {
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == Thrift.Protocol.TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == Thrift.Protocol.TType.I32)
                        {
                            Action = (TAction)iprot.ReadI32();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 2:
                        if (field.Type == Thrift.Protocol.TType.Byte)
                        {
                            Flags = iprot.ReadByte();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 3:
                        if (field.Type == Thrift.Protocol.TType.I32)
                        {
                            Count = iprot.ReadI32();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 4:
                        if (field.Type == Thrift.Protocol.TType.Struct)
                        {
                            Error = new TError();
                            Error.Read(iprot);
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 5:
                        if (field.Type == Thrift.Protocol.TType.String)
                        {
                            ApplicationId = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 6:
                        if (field.Type == Thrift.Protocol.TType.String)
                        {
                            ConnectionId = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 7:
                        if (field.Type == Thrift.Protocol.TType.I64)
                        {
                            ConnectionSerial = iprot.ReadI64();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 8:
                        if (field.Type == Thrift.Protocol.TType.String)
                        {
                            Channel = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 9:
                        if (field.Type == Thrift.Protocol.TType.String)
                        {
                            ChannelSerial = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 10:
                        if (field.Type == Thrift.Protocol.TType.I64)
                        {
                            MsgSerial = iprot.ReadI64();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 11:
                        if (field.Type == Thrift.Protocol.TType.I64)
                        {
                            Timestamp = iprot.ReadI64();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 12:
                        if (field.Type == Thrift.Protocol.TType.List)
                        {
                            {
                                Messages = new List<TMessage>();
                                TList _list12 = iprot.ReadListBegin();
                                for (int _i13 = 0; _i13 < _list12.Count; ++_i13)
                                {
                                    TMessage _elem14 = new TMessage();
                                    _elem14 = new TMessage();
                                    _elem14.Read(iprot);
                                    Messages.Add(_elem14);
                                }
                                iprot.ReadListEnd();
                            }
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 13:
                        if (field.Type == Thrift.Protocol.TType.List)
                        {
                            {
                                Presence = new List<TPresence>();
                                TList _list15 = iprot.ReadListBegin();
                                for (int _i16 = 0; _i16 < _list15.Count; ++_i16)
                                {
                                    TPresence _elem17 = new TPresence();
                                    _elem17 = new TPresence();
                                    _elem17.Read(iprot);
                                    Presence.Add(_elem17);
                                }
                                iprot.ReadListEnd();
                            }
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("TProtocolMessage");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            if (__isset.action)
            {
                field.Name = "action";
                field.Type = Thrift.Protocol.TType.I32;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                oprot.WriteI32((int)Action);
                oprot.WriteFieldEnd();
            }
            if (__isset.flags)
            {
                field.Name = "flags";
                field.Type = Thrift.Protocol.TType.Byte;
                field.ID = 2;
                oprot.WriteFieldBegin(field);
                oprot.WriteByte(Flags);
                oprot.WriteFieldEnd();
            }
            if (__isset.count)
            {
                field.Name = "count";
                field.Type = Thrift.Protocol.TType.I32;
                field.ID = 3;
                oprot.WriteFieldBegin(field);
                oprot.WriteI32(Count);
                oprot.WriteFieldEnd();
            }
            if (Error != null && __isset.error)
            {
                field.Name = "error";
                field.Type = Thrift.Protocol.TType.Struct;
                field.ID = 4;
                oprot.WriteFieldBegin(field);
                Error.Write(oprot);
                oprot.WriteFieldEnd();
            }
            if (ApplicationId != null && __isset.applicationId)
            {
                field.Name = "applicationId";
                field.Type = Thrift.Protocol.TType.String;
                field.ID = 5;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(ApplicationId);
                oprot.WriteFieldEnd();
            }
            if (ConnectionId != null && __isset.connectionId)
            {
                field.Name = "connectionId";
                field.Type = Thrift.Protocol.TType.String;
                field.ID = 6;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(ConnectionId);
                oprot.WriteFieldEnd();
            }
            if (__isset.connectionSerial)
            {
                field.Name = "connectionSerial";
                field.Type = Thrift.Protocol.TType.I64;
                field.ID = 7;
                oprot.WriteFieldBegin(field);
                oprot.WriteI64(ConnectionSerial);
                oprot.WriteFieldEnd();
            }
            if (Channel != null && __isset.channel)
            {
                field.Name = "channel";
                field.Type = Thrift.Protocol.TType.String;
                field.ID = 8;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(Channel);
                oprot.WriteFieldEnd();
            }
            if (ChannelSerial != null && __isset.channelSerial)
            {
                field.Name = "channelSerial";
                field.Type = Thrift.Protocol.TType.String;
                field.ID = 9;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(ChannelSerial);
                oprot.WriteFieldEnd();
            }
            if (__isset.msgSerial)
            {
                field.Name = "msgSerial";
                field.Type = Thrift.Protocol.TType.I64;
                field.ID = 10;
                oprot.WriteFieldBegin(field);
                oprot.WriteI64(MsgSerial);
                oprot.WriteFieldEnd();
            }
            if (__isset.timestamp)
            {
                field.Name = "timestamp";
                field.Type = Thrift.Protocol.TType.I64;
                field.ID = 11;
                oprot.WriteFieldBegin(field);
                oprot.WriteI64(Timestamp);
                oprot.WriteFieldEnd();
            }
            if (Messages != null && __isset.messages)
            {
                field.Name = "messages";
                field.Type = Thrift.Protocol.TType.List;
                field.ID = 12;
                oprot.WriteFieldBegin(field);
                {
                    oprot.WriteListBegin(new TList(Thrift.Protocol.TType.Struct, Messages.Count));
                    foreach (TMessage _iter18 in Messages)
                    {
                        _iter18.Write(oprot);
                    }
                    oprot.WriteListEnd();
                }
                oprot.WriteFieldEnd();
            }
            if (Presence != null && __isset.presence)
            {
                field.Name = "presence";
                field.Type = Thrift.Protocol.TType.List;
                field.ID = 13;
                oprot.WriteFieldBegin(field);
                {
                    oprot.WriteListBegin(new TList(Thrift.Protocol.TType.Struct, Presence.Count));
                    foreach (TPresence _iter19 in Presence)
                    {
                        _iter19.Write(oprot);
                    }
                    oprot.WriteListEnd();
                }
                oprot.WriteFieldEnd();
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder("TProtocolMessage(");
            sb.Append("Action: ");
            sb.Append(Action);
            sb.Append(",Flags: ");
            sb.Append(Flags);
            sb.Append(",Count: ");
            sb.Append(Count);
            sb.Append(",Error: ");
            sb.Append(Error == null ? "<null>" : Error.ToString());
            sb.Append(",ApplicationId: ");
            sb.Append(ApplicationId);
            sb.Append(",ConnectionId: ");
            sb.Append(ConnectionId);
            sb.Append(",ConnectionSerial: ");
            sb.Append(ConnectionSerial);
            sb.Append(",Channel: ");
            sb.Append(Channel);
            sb.Append(",ChannelSerial: ");
            sb.Append(ChannelSerial);
            sb.Append(",MsgSerial: ");
            sb.Append(MsgSerial);
            sb.Append(",Timestamp: ");
            sb.Append(Timestamp);
            sb.Append(",Messages: ");
            sb.Append(Messages);
            sb.Append(",Presence: ");
            sb.Append(Presence);
            sb.Append(")");
            return sb.ToString();
        }

    }

}
